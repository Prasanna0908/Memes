{"version":3,"sources":["SearchBox.js","images/1.jpg","LoadAll.js","Memes.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","props","onTextChanged","e","value","target","suggestions","length","regex","RegExp","item","sort","filter","v","test","setState","text","state","this","map","onClick","suggestionSelected","className","href","hidden","type","placeholder","onChange","renderSuggestions","React","Component","LoadAll","console","log","isLoad","Components","memes","meme","src","url","handler","name","Memes","Change","activeImage","window","scrollTo","btn","preventDefault","document","querySelector","domtoimage","toBlob","then","blob","saveAs","topText","bottomText","allMemes","loading","handleChange","bind","fetch","res","json","response","data","class","id","alt","active","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8ebd940a.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\n// function SearchBox() {\r\n\r\n\r\n\r\n//     return (\r\n//         <div className=\"wrapper\">\r\n//             <div className=\"search-input\">\r\n//                 <a href=\"\" target=\"_blank\" hidden></a>\r\n//                 <input type=\"text\" placeholder=\"Type to search..\"></input>\r\n//                 <div className=\"autocom-box\">\r\n\r\n//                 </div>\r\n//                 <div className=\"icon\"><i className=\"fa fa-search\"></i></div>\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\nclass SearchBox extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.item = [\"Channel\",\r\n\r\n            \"YouTube\",\r\n            \"YouTuber\",\r\n            \"YouTube Channel\",\r\n            \"Blogger\",\r\n            \"Bollywood\",\r\n            \"Vlogger\",\r\n            \"Vechiles\",\r\n            \"Facebook\",\r\n            \"Freelancer\",\r\n            \"Facebook Page\",\r\n            \"Designer\",\r\n            \"Developer\",\r\n            \"Web Designer\",\r\n            \"Web Developer\",\r\n            \"Login Form in HTML & CSS\",\r\n            \"How to learn HTML & CSS\",\r\n            \"How to learn JavaScript\",\r\n            \"How to became Freelancer\",\r\n            \"How to became Web Designer\",\r\n            \"How to start Gaming Channel\",\r\n            \"How to start YouTube Channel\",\r\n            \"What does HTML stands for?\",\r\n            \"What does CSS stands for?\",\r\n        ]\r\n        this.state = {\r\n            suggestions: [],\r\n            text: \"\",\r\n        }\r\n    }\r\n\r\n    onTextChanged = ((e) => {\r\n        const value = e.target.value;\r\n        let suggestions = []\r\n        if (value.length > 0) {\r\n            const regex = new RegExp(`^${value}`, 'i')\r\n            suggestions = this.item.sort().filter(v => regex.test(v))\r\n        }\r\n\r\n        this.setState(() => ({\r\n            suggestions,\r\n            text: value,\r\n        }))\r\n    })\r\n\r\n\r\n    suggestionSelected(value) {\r\n        this.setState(() => ({\r\n            text: value,\r\n            suggestions: [],\r\n        }))\r\n    }\r\n\r\n    renderSuggestions() {\r\n        const { suggestions } = this.state\r\n        if (suggestions.length === 0) {\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <ul>\r\n                {suggestions.map((item) => (<li onClick={() => (this.suggestionSelected(item))} className=\"suggestions\">{item}</li>))}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const { text } = this.state\r\n\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <div className=\"search-input\">\r\n\r\n                    <a href=\"\" target=\"_blank\" hidden></a>\r\n                    <input type=\"text\" placeholder=\"Search Meme..\" value={text} onChange={this.onTextChanged}></input>\r\n                    <div className=\"autocom-box\">\r\n\r\n                    </div>\r\n                    <div className=\"icon\"><i className=\"fa fa-search\"></i></div>\r\n\r\n                    {this.renderSuggestions()}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default SearchBox","export default __webpack_public_path__ + \"static/media/1.8fee1fcb.jpg\";","import React from \"react\"\r\n\r\n\r\n\r\n\r\nfunction LoadAll(props) {\r\n    console.log(props.isLoad)\r\n    console.log(props)\r\n\r\n\r\n\r\n    if (props.isLoad === false) {\r\n\r\n        const Components = props.memes.map((meme) => {\r\n\r\n            return (\r\n                <div className=\"card 1\">\r\n                    <div className=\"card_image\"> <img src={meme.url} onClick={props.handler} /> </div>\r\n                    <div className=\"card_title title-white\">\r\n                        <p >{meme.name}</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <div>\r\n\r\n\r\n\r\n                <div className=\"cards-list\">\r\n\r\n                    {Components}\r\n\r\n\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <h1>loading</h1>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default LoadAll","import React, { Fragment } from 'react';\r\nimport logo from './images/1.jpg'\r\nimport LoadAll from \"./LoadAll\"\r\nimport { saveAs } from 'file-saver';\r\nimport domtoimage from 'dom-to-image';\r\nimport Draggable, { DraggableCore } from 'react-draggable'; // Both at the same time\r\n\r\n\r\nimport html2canvas from 'html2canvas';\r\n\r\n\r\nclass Memes extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            topText: \"\",\r\n            bottomText: \"\",\r\n            activeImage: \"https://i.imgflip.com/30b1gx.jpg\",\r\n            allMemes: [],\r\n            loading: true\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this)\r\n        // this.handler = this.handler.bind(this);\r\n\r\n        this.btn = this.btn.bind(this)\r\n\r\n\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(`https://api.imgflip.com/get_memes`).then(res => res.json()).then(response => {\r\n\r\n            const { memes } = response.data\r\n            console.log(memes[0])\r\n            this.setState({ allMemes: memes, loading: false })\r\n            console.log(this.state.allMemes)\r\n        })\r\n\r\n\r\n\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        <img src={this.state.allMemes[0].url} className=\"logo\" alt=\"ede\" />\r\n\r\n    }\r\n\r\n    handleChange(e) {\r\n        const { name, value } = e.target\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n\r\n    Change = (e) => {\r\n        this.setState({ activeImage: e.target.src })\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    // handler(e) {\r\n    //     console.log(\"clicked\")\r\n    //     let url = console.log(e.target.src)\r\n    //     return (< img src={e.target.src} className=\"logo\" alt=\"wec\" />)\r\n    //     this.setState({\r\n    //         activeImage: e.target.src\r\n    //     });\r\n    // }\r\n\r\n    btn = (e) => {\r\n        console.log(\"button clicked\");\r\n        e.preventDefault()\r\n        console.log(document.querySelector(\".Parent\"))\r\n        if (document.querySelector(\".Parent\")) {\r\n            domtoimage.toBlob(document.querySelector(\".Parent\"))\r\n                .then(function (blob) {\r\n                    window.saveAs(blob, 'my-node.png');\r\n                });\r\n        }\r\n        else {\r\n            console.log(\"sfvf\")\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form>\r\n                    <div>\r\n                        <input type=\"text\" name=\"topText\" value={this.state.topText} onChange={this.handleChange} placeholder=\"Enter First Line\" className=\"First\"></input>\r\n                        <br />\r\n                        <input type=\"text\" name=\"bottomText\" value={this.state.bottomText} onChange={this.handleChange} placeholder=\"Enter Second Line\" className=\"Second\"></input>\r\n                        <br />\r\n                        {/* <button id=\"foo\" onClick={this.btn}>download img</button> */}\r\n\r\n                        <div class=\"sub-main\">\r\n                            <button id=\"foo\" onClick={this.btn} className=\"button-two\"><span>Download</span></button>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n\r\n                    {/* <div className=\"images small__container\"> */}\r\n\r\n                    <div className=\"Parent\" id=\"#capture\">\r\n\r\n                        {/* <img src={logo} className=\"logo\" alt=\"\" /> */}\r\n\r\n\r\n\r\n\r\n                        <img src={this.state.activeImage} className=\"logo\" alt=\"wec\" />\r\n\r\n                        {/* <img src={(this.state.allMemes) === true ? this.state.allMemes[0].url : { logo }} className=\"logo\" /> */}\r\n\r\n\r\n\r\n                        <Draggable>\r\n                            <h2 className=\"top box draggable\">{this.state.topText}</h2>\r\n                        </Draggable>\r\n\r\n                        <Draggable>\r\n                            <h2 className=\"bottom box\">{this.state.bottomText}</h2>\r\n                        </Draggable>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    </div>\r\n\r\n\r\n\r\n\r\n\r\n                </form>\r\n                <LoadAll memes={this.state.allMemes} isLoad={this.state.loading} active={this.state.activeImage} handler={this.Change} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Memes","\nimport './App.css';\nimport SearchBox from \"./SearchBox\"\nimport Memes from \"./Memes\"\n\nfunction App() {\n  return (\n    <div>\n      <SearchBox />\n\n\n\n      <Memes />\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}